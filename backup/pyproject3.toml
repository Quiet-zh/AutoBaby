# ========================
# 项目元数据配置
# ========================
[tool.poetry]
name = "autobaby"                             # 项目名称（包名）
version = "0.0.1"                             # 当前版本号（遵循语义化版本）
description = "A Python automation application for Windows 10+ featuring auto-click, simulated clicks, scheduled tasks, API requests, and a native GUI, managed with Poetry."      # 项目简短描述（显示在PyPI）
authors = ["ohmyrain <2013471393@qq.com>"]    # 维护者信息
repository = "https://github.com/Quiet-zh/AutoBaby"        # 代码仓库地址
documentation = "https://Quiet-zh.github.io/AutoBaby/"     # 文档站点地址
readme = "README.md"                          # 主说明文件路径
packages = [                                  # 包含的代码包配置
  {include = "autobaby"}                      # 包含 autobaby 目录作为包
]

# ========================
# 包源镜像配置（加速国内下载）
# ========================
[[tool.poetry.source]]                        # 主镜像源（数组格式）
name = "aliyun"                               # 镜像名称标识
url = "https://mirrors.aliyun.com/pypi/simple/"
priority = "primary"                          # 优先级：primary > secondary > explicit

[[tool.poetry.source]]                        # 备用镜像源
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple/"
priority = "secondary"                        # 当主源不可用时使用

[[tool.poetry.source]]                        # 官方源（显式调用）
name = "pypi"
url = "https://pypi.org/simple/"
priority = "explicit"                         # 需要显式指定时使用

# ========================
# CLI入口配置
# ========================
[tool.poetry.scripts]
autobaby = "autobaby.gui:create_window"       # 命令行命令映射到GUI创建函数

# ========================
# 主依赖配置（运行时必需）
# ========================
[tool.poetry.dependencies]
python = ">=3.10,<4.0"                        # Python版本约束（需≥3.10）
blinker = "1.9.0"
certifi = "2025.1.31"
charset-normalizer = "3.4.1"
click = "8.1.8"
colorama = "0.4.6"
comtypes = "1.4.10"
dill = "0.3.9"
Flask = "3.1.0"                               # Web框架
idna = "3.10"
itsdangerous = "2.2.0"
Jinja2 = "3.1.6"
keyboard = "0.13.5"
MarkupSafe = "3.0.2"
MouseInfo = "0.1.3"
numpy = "2.2.4"                               # 数值计算核心库
# 图像处理
opencv-python = "4.11.0.86"                   # OpenCV Python绑定
packaging = "24.2"
pillow = "11.1.0"                             # 图像处理库
psutil = "7.0.0"                              # 系统监控
# 自动化核心
pyautogui = "^0.9.54"                         # 屏幕自动化控制
PyGetWindow = "0.0.9"
PyMsgBox = "1.0.9"
pynput = "1.8.1"                              # 键盘/鼠标监听
# GUI相关
pyqt6 = "^6.9.0"                              # Qt6 GUI框架
pyperclip = "1.9.0"
PyRect = "0.2.0"
PyScreeze = "1.0.1"
PySocks = "1.7.1"
pytweening = "1.2.0"
# 系统交互
pywin32 = "310"                               # Windows API接口
pywin32-ctypes = "0.2.3"
pywinauto = "0.6.9"                           # Windows GUI自动化
pyyaml = "^6.0.2"
requests = "^2.32.3"                          # HTTP客户端
schedule = "^1.2.2"                           # 定时任务管理
tomlkit = "0.13.2"
ttkthemes = "3.2.2"                           # Tkinter主题库
urllib3 = "2.3.0"
Werkzeug = "3.1.3"

# ========================
# 开发依赖组（非必需）
# ========================
[tool.poetry.group.dev.dependencies]
deptry = "^0.16.2"
pre-commit = "^3.4.0"
tox = "^4.11.1"
# 代码质量
pylint = "3.3.6"                              # 静态代码分析
astroid = "3.3.9"                             # pylint的依赖
mccabe = "0.7.0"                              # pylint 的依赖
isort = "6.0.1"                               # 代码格式化
ruff = "0.3.7"                                # 高性能Linter
# 测试工具
pytest = "^7.4.4"                             # 测试框架
pytest-mock = "^3.14.0"                       # Mock测试支持
pytest-cov = "^4.1.0"                         # 覆盖率测试
platformdirs = "4.3.7"                        # pytest-cov 的依赖
# 类型检查
pyright = "^1.1.382"                          # 静态类型检查器
# 日志工具
loguru = "^0.7.3"

# 构建工具
# 实际打包时才安装，可通过临时安装命令：
# poetry run pip install pyinstaller altgraph pefile poethepoet
# poethepoet = "^0.24.4"                        # 任务运行器替代 Makefile
# pyinstaller = "6.12.0"                        # 打包成exe
# altgraph = "0.17.4"
# pefile = "2023.2.7"
# pyinstaller-hooks-contrib = "2025.2"

# ========================
# 文档依赖组
# ========================
[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"                             # 文档生成框架
mkdocs-material = "^9.2.7"                    # Material主题
mkdocstrings = {extras = ["python"], version = "^0.26.1"}  # 自动API文档

# ========================
# 构建系统配置
# ========================
[build-system]
requires = ["poetry-core>=1.0.0"]             # 构建工具链要求
build-backend = "poetry.core.masonry.api"     # 构建后端

# ========================
# 开发工具配置
# ========================
[tool.pyright]                                # VS Code类型检查配置
include = ["autobaby"]                        # 检查范围
typeCheckingMode = "strict"                   # 严格模式
venvPath = "."                                # 虚拟环境位置

[tool.pytest.ini_options]                     # Pytest配置
testpaths = ["tests"]                         # 测试目录
addopts = "--verbose --color=yes"             # 默认参数
filterwarnings = ["ignore::DeprecationWarning"]  # 过滤警告

[tool.ruff]                                   # 极速Linter配置
target-version = "py310"                      # 目标Python版本
line-length = 120                             # 行字符限制
fix = true
select = [                                    # 启用的规则集
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [                                    # 忽略的规则
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]
per-file-ignores = {"tests/*" = ["S101"]}     # 测试文件特殊规则

[tool.ruff.format]                            # 格式化配置
preview = true                                # 启用预览样式

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]                           # 覆盖率配置
branch = true                                 # 检查分支覆盖率
source = ["autobaby"]                         # 检测范围
omit = ["tests/*"]                            # 排除项